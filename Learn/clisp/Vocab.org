#+title: Vocab
#+author: faultypointer
#+date: <2025-03-30 Sun>

This notes contains the Lisp functions, macros and special operators I've come across.



* TODO Add these to the vocab
** Special Operators / macros
*** definations
- [X] defun
- [ ] defparameter
- [ ] defstruct
- [ ] defvar
- [ ] defconstant
- [ ] defmacro
- [ ] labels
*** conditional
- [ ] if
- [ ] when
- [ ] cond
- [ ] and
- [ ] or
- [ ] unless
- [ ] case
*** variables
- [ ] let
- [ ] let*
- [ ] pop
- [ ] push
- [ ] setf
- [ ] incf
- [ ] decf
*** iteration
- [ ] do
- [ ] do*
- [ ] dolist
- [ ] dotimes
- [ ] loop
*** others
- [ ] declare
- [ ] function
- [ ] progn
- [ ] quote
- [ ] return
- [ ] trace
- [ ] untrace
** Functions
- [ ] apply
- [ ] funcall
- [ ] mapcar
- [ ] mapc
- [ ] append
- [ ] elt
- [ ] assoc
- [ ] mappend
- [ ] cons
- [ ] acons
- [X] format


* Index
Ranking is based on the rough estimate of how much I've come across or used them and also my personal preference.
| Name   | Type     | Description                                | Ranking |
|--------+----------+--------------------------------------------+---------|
| [[*FORMAT][FORMAT]] | function | produce formatted output                   |     100 |
| [[*DEFUN][DEFUN]]  | macro    | define a function                          |     300 |
| [[*MAPCAR][MAPCAR]] | function | call a function for each element in a list |     250 |
|        |          |                                            |         |

* Functions
** FORMAT
*** Syntax
~format destination control-string &rest args~ => result
*** Arguments and return values
destination: nil, t, a [[https://www.lispworks.com/documentation/HyperSpec/Body/26_glo_s.htm#stream][stream]], a string with a [[https://www.lispworks.com/documentation/HyperSpec/Body/26_glo_f.htm#fill_pointer][fill pointer]]
control-string: a [[https://www.lispworks.com/documentation/HyperSpec/Body/26_glo_f.htm#format_control][format control]]
args: [[https://www.lispworks.com/documentation/HyperSpec/Body/26_glo_f.htm#format_argument][format arguments]] for control-string
result: destination is non-nil, then nil otherwise a string
*** Description
format produces formatted output by outputting the characters of control-string and observing that a tilde introduces a directive. The character after the tilde, possibly preceded by prefix parameters and modifiers, specifies what kind of formatting is desired. Most directives use one or more elements of args to create their output.

*** Examples
#+begin_src lisp
(format t "hello world")
(format nil "~a" (list 1 2 3))
#+end_src

#+RESULTS:
: (1 2 3)

** MAPCAR
*** Syntax
~mapcar function &rest lists+~ -> result-list
*** Arguments and return values
function: a designator for a function that must take as many arguments as there are lists
*** Description
mapcar operates on successive elements of the lists. function is applied to the first element of each list, then to the second element of each list, and so on. The iteration terminates when the shortest list runs out, and excess elements in other lists are ignored. The value returned by mapcar is a list of the results of successive calls to function.
*** Examples
#+begin_src lisp : :exports both
(mapcar #'+ '(1 2 3) '(10 20 30) '(100 200 300))
#+end_src

#+RESULTS:
| 111 | 222 | 333 |

* Special Operator / Macros

** DEFUN
*** Syntax
~defun function-name lambda-list [ {declaration}* / documentation ]  {form}*~
*** Arguments and Values
function-name: self explanatory
lambda list: a list of arguments. see [[file:prac-cmon-lisp/Function.org::*Parameter List][Parameter List]] for more info.
declaration: a [[https://lisp-docs.github.io/cl-language-reference/chap-3/d-i-dictionary/declare_symbol][declare]] expression, not evaluated
documentation: a documentation string, also not evaluated
forms: program body
*** Description
defines a new function in the global environment. can be used to define a new function, to install corrected version of an incorrect defination, redefine an already defined function or to redefine a macro as a function
*** Examples
#+begin_src lisp :exports both
(defun factorial (n)
  "calculate the factorial of a number n
n needs to be a positive integer"
  (cond ((= n 0) 1)
        ((= n 1) 1)
        (t (* n (factorial (1- n))))))

(factorial 5)
#+end_src

#+RESULTS:
: 120
