#+title: Exercise
#+author: faultypointer
#+date: <2025-04-04 Fri>

* Show a lambda expression
that is equivalent to the above(or in this case below) ~let*~ expression. you may need more than one lambda.

#+begin_src lisp
(let* ((x 6)
       (y (* x x)))
  (+ x y))
#+end_src

#+RESULTS:
: 42

okay so two lambda
#+begin_src lisp
((lambda (x)
   (+ ((lambda (y)
         (* y y))
       x)
      x))
 6)
#+end_src

#+RESULTS:
: 42

* The function ~cons~
can be seen as a special case of which one of the previously listed function.

append?

* Write a function
that will print an expression in dotted pair notation. Use the built-in function princ to print each component of the expression.

#+begin_src lisp
(defun dotted-print (expr)
    "print an expression in dotted pair notation"
  (cond ((atom expr) (princ expr))
        ((null (rest expr)) (princ (first expr)))
         (t (progn (princ (first expr)) (princ " . ") (dotted-print (rest expr))))))
#+end_src

#+RESULTS:
: DOTTED-PRINT

is the question asking me to do this and get the following result
> 1 . (2 3) . (4 5 (6 7) 8) . 9

or this
#+begin_src lisp
(defun dotted-print (expr)
    "print an expression in dotted pair notation"
  (cond ((atom expr) (princ expr))
        ((null (rest expr)) (princ (first expr)))
         (t (progn (dotted-print (first expr)) (princ " . ") (dotted-print (rest expr))))))
#+end_src

#+RESULTS:
: DOTTED-PRINT
and get the result
> 1 . 2 . 3 . 4 . 5 . 6 . 7 . 8 . 9

or is it asking for completely different thing

* Write a function that, like the regular ~print~ function,
will print an expression in dotted pair notation when necessary but will use normal list notation when possible.

#+begin_src lisp
(defun regular-dotted-print (expr)
    "print an expression in dotted pair notation"
  (cond ((atom expr) (princ expr))
        ((null (rest expr)) (princ (first expr)))
        ((atom (rest expr)) (progn (princ (first expr)) (princ " . ") (princ (rest expr))))
         (t (progn (princ (first expr)) (princ " ") (dotted-print (rest expr))))))
#+end_src

#+RESULTS:
: REGULAR-DOTTED-PRINT

this feels wrong when i see the output

* Twenty Questions
(Exercise in altering structure.) Write a program that will play the role of the guesser in the game Twenty Questions. The user of the program will have in mind any type of thing. The program will ask questions of the user, which must be answered yes or no, or "it" when the program has guessed it. If the program runs out of guesses, it gives up and asks the user what "it" was. At first the program will not play well, but each time it plays, it will remember the user's replies and use them for subsequent guesses.

first of all I don't know exactly what 20 questions game is. I know it involves asking 20 questions and guessing. I don't know what kinda questions and what kinds of things "it" can be. besides that yes it is a [h] question. how to approach this. i should probably have a tree (binary i think) of some sort. okay so apparently the question is asked as "is it a blank?" and the top categories are person place or a thing. so ((person . (...)), (place . (...)), (thing, (...)))

maybe i should have record a number associated with each key like item like ((person . 3) . (...)) where 3 is the number of times the uses has thought of something that was a person.
also apparently no proper names.
maybe tree isn't an good option.
(cat -> animal feline 4-legged-animal)
something like this
