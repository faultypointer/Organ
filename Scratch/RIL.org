#+title: Read It Later
#+author: faultypointer

* Articles/Blogs
** Programming
*** Languages

**** Zig
- [ ] [[https://matklad.github.io/2025/03/19/comptime-zig-orm.html][Zig Comptime ORM]]

**** Go
- [ ] [[https://r2p.dev/b/2024-03-18-1brc-go/][1BRC in Go, from 95s to 1.96s]]
- [ ] [[https://grafana.com/blog/2024/02/09/how-i-write-http-services-in-go-after-13-years/][How I Write HTTP services in Go]]
- [ ] [[https://preslav.me/2022/08/09/i-dont-like-golang-default-http-handlers/][I don't like go's default http handlers]]
- [ ] [[https://dave.cheney.net/practical-go/presentations/qcon-china.html][Practical Go: real world advice for writing mainainable go programs]]

**** Python
- [X] [[https://marimo.io/blog/lessons-learned][Lessons Learned Reinventing Python Notebook]]
  graphs rocks, design is very important, stay true to original pillar
**** Rust
- [ ] [[https://shnatsel.medium.com/how-to-avoid-bounds-checks-in-rust-without-unsafe-f65e618b4c1e][How to avoid bounds checks in Rust]]

- [X] [[https://corrode.dev/blog/pitfalls-of-safe-rust/][Pitfalls of Safe Rust]]
  use checked arithmetic (checked_(add/mul/sub/div))
  use from or tryfrom instead of as
  create bounded types
  dont index into array without bound checking (also split_at_checked)
  dont use primitive types for business logic + make invalid states unrepresentable
  dont derive debug, serialize, default carelessly
  check for unsafe code in deps with cargo-geiger
  clippy lints for above issues
  #+begin_src rust
// Arithmetic
#![deny(arithmetic_overflow)] // Prevent operations that would cause integer overflow
#![deny(clippy::checked_conversions)] // Suggest using checked conversions between numeric types
#![deny(clippy::cast_possible_truncation)] // Detect when casting might truncate a value
#![deny(clippy::cast_sign_loss)] // Detect when casting might lose sign information
#![deny(clippy::cast_possible_wrap)] // Detect when casting might cause value to wrap around
#![deny(clippy::cast_precision_loss)] // Detect when casting might lose precision
#![deny(clippy::integer_division)] // Highlight potential bugs from integer division truncation
#![deny(clippy::arithmetic_side_effects)] // Detect arithmetic operations with potential side effects
#![deny(clippy::unchecked_duration_subtraction)] // Ensure duration subtraction won't cause underflow

// Unwraps
#![warn(clippy::unwrap_used)] // Discourage using .unwrap() which can cause panics
#![warn(clippy::expect_used)] // Discourage using .expect() which can cause panics
#![deny(clippy::panicking_unwrap)] // Prevent unwrap on values known to cause panics
#![deny(clippy::option_env_unwrap)] // Prevent unwrapping environment variables which might be absent

// Array indexing
#![deny(clippy::indexing_slicing)] // Avoid direct array indexing and use safer methods like .get()

// Path handling
#![deny(clippy::join_absolute_paths)] // Prevent issues when joining paths with absolute paths

// Serialization issues
#![deny(clippy::serde_api_misuse)] // Prevent incorrect usage of Serde's serialization/deserialization API

// Unbounded input
#![deny(clippy::uninit_vec)] // Prevent creating uninitialized vectors which is unsafe

// Unsafe code detection
#![deny(clippy::transmute_int_to_char)] // Prevent unsafe transmutation from integers to characters
#![deny(clippy::transmute_int_to_float)] // Prevent unsafe transmutation from integers to floats
#![deny(clippy::transmute_ptr_to_ref)] // Prevent unsafe transmutation from pointers to references
#![deny(clippy::transmute_undefined_repr)] // Detect transmutes with potentially undefined representations
#+end_src
*** Performance and optimization
- [X] [[https://xuanwo.io/2023/04-rust-std-fs-slower-than-python/][Rust std fs is shower than Python?]]
  yes and no. it was amd ucode stuff (didn't understand much of the low level stuff)
  look into jemalloc, strace

*** Asynchronous Programming
- [X] [[https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/][What color is you function?]]
  no async and sync stuff. instead threads. otherwise whole lots of problem. and go is the best lang.

*** General
- [ ] [[https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md][TigerStyle]]
- [ ] [[https://cacm.acm.org/research/10-things-software-developers-should-learn-about-learning/][10 things every developer should learn]]

- [X] [[https://antirez.com/news/124][Writing systems software: code comments]]
  design comment, why comments and teacher comment are really great. also kinda changed my mind on guide comment. i like them now
- [X] [[https://mbuffett.com/posts/maintaining-motivation/][Managing My motivation, as a solo dev]]
  leave a little bit of code for the next day. just enough to get the engines running
- [X] [[https://johnresig.com/blog/write-code-every-day/][Write code every day]]

*** Tools
**** Emacs
- [X] [[https://www.masteringemacs.org/article/effective-editing-movement][Effective Editing I: Movement]]
  C-M-(f/b) for forward and backward balanced expr like quotes brackets
  M-m beginingn of line + forward past all indentations
  M-g M-g goto line
  C-M-(a/e) beginning and end of function defination



* Books
** Programming
*** System Design
- [ ] Data Oriented Design by Richard Fabian
*** OS
- [ ] [[https://pages.cs.wisc.edu/~remzi/OSTEP/][Operating System: Three Easy Step]]
*** Rust
- [ ] [[https://rust-unofficial.github.io/too-many-lists/index.html][Learn Rust Entirely with Too Many LinkedList]]
- [ ] [[https://doc.rust-lang.org/nightly/nomicon/intro.html][Rustonomicon]]
- [ ] [[https://marabos.nl/atomics/][Rust Atomics and Locks]]
- [ ] [[https://veykril.github.io/tlborm/introduction.html][The Little Book About Rust Macros]]
- [ ] [[https://rust-unofficial.github.io/patterns/intro.html][Rust Design Patterns]]
*** Oxidized Learning
- [ ] Interpreter in Go
- [ ] Compiler in Go
- [ ] Crafting Interpreter
- [ ] [[https://viewsourcecode.org/snaptoken/kilo/][Build Your Own Text Editor]]
- [ ] [[https://www.leshenko.net/p/ugit/][Learn By Building Your Own Git]]
- [ ] [[https://blog.jse.li/posts/torrent/][Building a BitTorrent client from the ground up in Go]]

* Subscriptions
** blogs and other stuff of people
- https://tavianator.com/index.html
- https://andrewkelley.me/
- https://matklad.github.io/
- [[https://www.piglei.com/articles/en-programmer-reading-list-part-one/][Programmer's Reading List]]
- https://togglebit.io/

** Youtube
- [[https://www.youtube.com/@jonhoo][Jon Gjengset]]
