#+title: Note
#+author: faultypointer
#+date: <2025-03-30 Sun>

* What are we making?
a program to generate random english sentences.


* Simple and Straigt Forward Solution
the grammer

#+begin_quote
/Sentence/ => /Noun-Phrase/ + /Verb-Phrase/
/Noun-Phrase/ => /Article/ + /Noun/
/Verb-Phrase/ => /Verb/ + /Noun-Phrase/
/Article/ => `the`, `a`, ...
/Noun/ => `man`, `ball`, `woman`, `table`...
/Verb/ => `hit`, `took`, `saw`, `liked`...
#+end_quote

define each rule by a function and randomly choose an element for Noun, Verb and Article rule.

#+begin_src lisp :exports both
(defun random-elt (choices)
  "choose a random element from the list"
  (elt choices (random (length choices))))

(defun one-of (set)
  "pick one element of a set and make a list of it"
  (list (random-elt set)))

(defun Noun () (one-of '(man ball woman table)))

(defun Verb () (one-of '(hit took saw liked)))

(defun Article () (one-of '(the a)))

(defun verb-phrase () (append (Verb) (noun-phrase)))

(defun noun-phrase () (append (Article) (Noun)))

(defun sentence () (append (noun-phrase) (verb-phrase)))

(format nil "~a~%~a~%~a~%" (sentence) (sentence) (sentence))
#+end_src

#+RESULTS:
: (THE WOMAN SAW A MAN)
: (A BALL TOOK THE TABLE)
: (A BALL HIT THE TABLE)
** slightly more complex rule
#+begin_quote
Noun-Phrase => Article + Adj\ + Noun + PP*
Adj* => ∅, Adj + Adj*
PP* => ∅, PP + PP*
PP => Prep + Noun-Phrase
Adj => big, little, blue, green, ...
Prep => to, in, by, with, ...*
#+end_quote

now we have to use conditionals because of phi and kleene-star
#+begin_src lisp
(defun Adj* ()
  (if (= (random 2) 0)
      nil
      (append (Adj) (Adj*))))

(defun PP* ()
  (if (random-elt '(t nil))
      (append (PP) (PP*))
      nil))

(defun noun-phrase () (append (Article) (Adj*) (Noun) (PP*)))
(defun PP () (append (Prep) (noun-phrase)))
(defun Adj () (one-of '(big little blue green adiabatic)))
(defun Prep () (one-of '(to in by with on)))

(format nil "~a~%~a~%~a~%" (sentence) (sentence) (sentence))
#+end_src

#+RESULTS:
: (THE ADIABATIC BLUE LITTLE BLUE MAN HIT A BALL)
: (THE TABLE TOOK A MAN TO A BALL WITH THE BALL BY THE BLUE TABLE TO THE MAN IN A
:      BLUE GREEN BALL ON THE TABLE BY A TABLE IN A WOMAN TO THE LITTLE TA...[sly-elided string of length 1457]


* Rule Based Solution
#+begin_src lisp
(defparameter *simple-grammar*
  '((sentence -> (noun-phrase verb-phrase))
    (noun-phrase -> (Article Noun))
    (verb-phrase -> (Verb noun-phrase))
    (Article -> the a)
    (Noun -> man ball woman table)
    (Verb -> hit took saw liked))
  "A grammar for a trivial subset of English.")

(defvar *grammar* *simple-grammar*
  "The grammar used by generate. Initially, this is
,*simple-grammar, but we can switch to other grammars.")
#+end_src

#+RESULTS:
: *GRAMMAR*

now to get things from the rules

#+begin_src lisp
(defun rule-lhs (rule)
  "The left-hand side of a rule"
  (first rule))

(defun rule-rhs (rule)
  "The right-hand side of a rule."
  (rest (rest rule)))

(defun rewrites (category)
  "Return a list of the possible rewrites for this category"
  (rule-rhs (assoc category *grammar*)))
#+end_src

#+RESULTS:
: REWRITES

#+begin_src lisp
(defun mappend (fn the-list)
  "Apply fn to each element of list and append the results."
  (apply #'append (mapcar fn the-list)))

(defun generate (phrase)
  "Generate a random sentence or phrase"
  (cond ((listp phrase)
         (mappend #'generate phrase))
        ((rewrites phrase)
         (generate (random-elt (rewrites phrase))))
        (t (list phrase))))
#+end_src

#+RESULTS:
: GENERATE

#+begin_src lisp :exports both
(format nil "~a~%~a~%~a~%" (generate 'sentence) (generate 'sentence) (generate 'noun-phrase))
#+end_src

#+RESULTS:
: (A BALL SAW THE WOMAN)
: (A BALL HIT THE BALL)
: (A WOMAN)

** Changing the grammar
this approach (using the most natural notation available to solve the problem, and then worry about writing an interpreter for that notation) makes it easy to define new grammar without modifying the generate code.

#+begin_src lisp
(defparameter *bigger-grammar*
  '((sentence -> (noun-phrase verb-phrase))
    (noun-phrase -> (Article Adj* Noun PP*) (Name) (Pronoun))
    (verb-phrase -> (Verb noun-phrase PP*))
    (PP* -> () (PP PP*))
    (Adj* -> () (Adj Adj*))
    (PP -> (Prep noun-phrase))
    (Prep -> to in by with on)
    (Adj -> big little blue green adiabatic)
    (Article -> the a)
    (Name -> Pat Kim Lee Terry Robin)
    (Noun -> man ball woman table)
    (Verb -> hit took saw liked)
    (Pronoun -> he she it these those that)))

(setf *grammar* *bigger-grammar*)
#+end_src

#+RESULTS:
| SENTENCE    | -> | (NOUN-PHRASE VERB-PHRASE) |            |           |       |           |      |
| NOUN-PHRASE | -> | (ARTICLE ADJ* NOUN PP*)   | (NAME)     | (PRONOUN) |       |           |      |
| VERB-PHRASE | -> | (VERB NOUN-PHRASE PP*)    |            |           |       |           |      |
| PP*         | -> | NIL                       | (PP PP*)   |           |       |           |      |
| ADJ*        | -> | NIL                       | (ADJ ADJ*) |           |       |           |      |
| PP          | -> | (PREP NOUN-PHRASE)        |            |           |       |           |      |
| PREP        | -> | TO                        | IN         | BY        | WITH  | ON        |      |
| ADJ         | -> | BIG                       | LITTLE     | BLUE      | GREEN | ADIABATIC |      |
| ARTICLE     | -> | THE                       | A          |           |       |           |      |
| NAME        | -> | PAT                       | KIM        | LEE       | TERRY | ROBIN     |      |
| NOUN        | -> | MAN                       | BALL       | WOMAN     | TABLE |           |      |
| VERB        | -> | HIT                       | TOOK       | SAW       | LIKED |           |      |
| PRONOUN     | -> | HE                        | SHE        | IT        | THESE | THOSE     | THAT |

#+begin_src lisp :exports both
(format nil "~a~%~a~%~a~%" (generate 'sentence) (generate 'sentence) (generate 'noun-phrase))
#+end_src

#+RESULTS:
: (A MAN TOOK A WOMAN BY HE)
: (PAT LIKED HE)
: (A GREEN ADIABATIC BLUE WOMAN IN THE MAN BY PAT BY LEE)

* Using same data for several programs
representing information in declarative form makes it easier to use that information for multiple purposes.

like generating a parse tree

#+begin_src lisp
(defun generate-tree (phrase)
  "Generate a random sentence or phrase,
with a complete parse tree."
  (cond ((listp phrase)
         (mapcar #'generate-tree phrase))
        ((rewrites phrase)
         (cons phrase
               (generate-tree (random-elt (rewrites phrase)))))
        (t (list phrase))))
#+end_src

#+RESULTS:
: GENERATE-TREE

#+begin_src lisp
(format nil "~a" (generate-tree 'sentence))
#+end_src

#+RESULTS:
: (SENTENCE (NOUN-PHRASE (NAME LEE))
:           (VERB-PHRASE (VERB LIKED) (NOUN-PHRASE (PRONOUN HE)) (PP*)))

also a function to generate all possible rewrites of a phrase.

#+begin_src lisp
(defun generate-all (phrase)
  "Generate a list of all possible expansions of this phrase."
  (cond ((null phrase) (list nil))
        ((listp phrase)
         (combine-all (generate-all (first phrase))
                      (generate-all (rest phrase))))
        ((rewrites phrase)
         (mappend #'generate-all (rewrites phrase)))
        (t (list (list phrase)))))

(defun combine-all (xlist ylist)
  "Return a list of lists formed by appending a y to an x.
Eg: (combine-all '((a) (b)) '((1) (2)))
-> ((A 1) (B 1) (A 2) (B 2))."
  (mappend #'(lambda (y)
               (mapcar #'(lambda (x) (append x y)) xlist))
           ylist))
#+end_src

#+RESULTS:
: COMBINE-ALL
