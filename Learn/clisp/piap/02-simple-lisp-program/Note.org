#+title: Note
#+author: faultypointer
#+date: <2025-03-30 Sun>

* What are we making?
a program to generate random english sentences.


* Simple and Straigt Forward Solution
the grammer

#+begin_quote
/Sentence/ => /Noun-Phrase/ + /Verb-Phrase/
/Noun-Phrase/ => /Article/ + /Noun/
/Verb-Phrase/ => /Verb/ + /Noun-Phrase/
/Article/ => `the`, `a`, ...
/Noun/ => `man`, `ball`, `woman`, `table`...
/Verb/ => `hit`, `took`, `saw`, `liked`...
#+end_quote

define each rule by a function and randomly choose an element for Noun, Verb and Article rule.

#+begin_src lisp :exports both
(defun random-elt (choices)
  "choose a random element from the list"
  (elt choices (random (length choices))))

(defun one-of (set)
  "pick one element of a set and make a list of it"
  (list (random-elt set)))

(defun Noun () (one-of '(man ball woman table)))

(defun Verb () (one-of '(hit took saw liked)))

(defun Article () (one-of '(the a)))

(defun verb-phrase () (append (Verb) (noun-phrase)))

(defun noun-phrase () (append (Article) (Noun)))

(defun sentence () (append (noun-phrase) (verb-phrase)))

(format nil "~a~%~a~%~a~%" (sentence) (sentence) (sentence))
#+end_src

#+RESULTS:
: (THE TABLE HIT A WOMAN)
: (A BALL LIKED A WOMAN)
: (THE MAN TOOK THE TABLE)
** slightly more complex rule
#+begin_quote
Noun-Phrase => Article + Adj\ + Noun + PP*
Adj* => ∅, Adj + Adj*
PP* => ∅, PP + PP*
PP => Prep + Noun-Phrase
Adj => big, little, blue, green, ...
Prep => to, in, by, with, ...*
#+end_quote

now we have to use conditionals because of phi and kleene-star
#+begin_src lisp
(defun Adj* ()
  (if (= (random 2) 0)
      nil
      (append (Adj) (Adj*))))

(defun PP* ()
  (if (random-elt '(t nil))
      (append (PP) (PP*))
      nil))

(defun noun-phrase () (append (Article) (Adj*) (Noun) (PP*)))
(defun PP () (append (Prep) (noun-phrase)))
(defun Adj () (one-of '(big little blue green adiabatic)))
(defun Prep () (one-of '(to in by with on)))

(format nil "~a~%~a~%~a~%" (sentence) (sentence) (sentence))
#+end_src

#+RESULTS:
: (THE MAN SAW THE MAN)
: (THE BLUE LITTLE BALL BY A GREEN BLUE MAN TOOK THE BIG MAN IN A TABLE)
: (THE WOMAN SAW THE WOMAN)


* Rule Based Solution
#+begin_src lisp
(defparameter *simple-grammar*
  '((sentence -> (noun-phrase verb-phrase))
    (noun-phrase -> (Article Noun))
    (verb-phrase -> (Verb noun-phrase))
    (Article -> the a)
    (Noun -> man ball woman table)
    (Verb -> hit took saw liked))
  "A grammar for a trivial subset of English.")

(defvar *grammar* *simple-grammar*
  "The grammar used by generate. Initially, this is
,*simple-grammar, but we can switch to other grammars.")
#+end_src

#+RESULTS:
: *GRAMMAR*

now to get things from the rules

#+begin_src lisp
(defun rule-lhs (rule)
  "The left-hand side of a rule"
  (first rule))

(defun rule-rhs (rule)
  "The right-hand side of a rule."
  (rest (rest rule)))

(defun rewrites (category)
  "Return a list of the possible rewrites for this category"
  (rule-rhs (assoc category *grammar*)))
#+end_src

#+RESULTS:
: REWRITES

#+begin_src lisp
(defun mappend (fn the-list)
  "Apply fn to each element of list and append the results."
  (apply #'append (mapcar fn the-list)))

(defun generate (phrase)
  "Generate a random sentence or phrase"
  (cond ((listp phrase)
         (mappend #'generate phrase))
        ((rewrites phrase)
         (generate (random-elt (rewrites phrase))))
        (t (list phrase))))
#+end_src

#+begin_src lisp :exports both
(format nil "~a~%~a~%~a~%" (generate 'sentence) (generate 'sentence) (generate 'noun-phrase))
#+end_src

#+RESULTS:
: (A BALL TOOK A WOMAN)
: (A TABLE SAW THE TABLE)
: (THE BALL)
